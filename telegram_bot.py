import asyncio
import logging
from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import *
from rate_limiter import TELEGRAM_LIMITER

class TelegramBotHandler:
    """Bot Telegram ULTRA SIMPLIFICADO - apenas essenciais"""
    
    _instance = None
    _initialized = False
    
    def __new__(cls, sniper_bot=None):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self, sniper_bot=None):
        if self._initialized:
            return
            
        self.sniper_bot = sniper_bot
        self.application = None
        self.notifications_enabled = True
        # Configurar usu√°rios autorizados, filtrando IDs inv√°lidos
        try:
            user_ids = [x.strip() for x in TELEGRAM_AUTHORIZED_USERS.split(',') if x.strip()]
            self.authorized_users = []
            for user_id in user_ids:
                try:
                    uid = int(user_id)
                    # Filtrar IDs de teste/placeholder
                    if uid != 123456789 and uid > 0:
                        self.authorized_users.append(uid)
                    else:
                        print(f"‚ö†Ô∏è ID de usu√°rio inv√°lido ignorado: {user_id}")
                except ValueError:
                    print(f"‚ö†Ô∏è ID de usu√°rio n√£o num√©rico ignorado: {user_id}")
            
            if not self.authorized_users:
                print("‚ö†Ô∏è Nenhum usu√°rio autorizado v√°lido configurado!")
                print("üí° Configure TELEGRAM_AUTHORIZED_USERS com IDs reais do Telegram")
        except:
            self.authorized_users = []
            print("‚ö†Ô∏è Erro ao configurar usu√°rios autorizados")
        self._initialized = True
        
        # Stats b√°sicas
        self.monitoring_stats = {
            'tokens_analyzed': 0,
            'trades_executed': 0,
            'total_profit': 0.0,
            'start_time': datetime.now()
        }
        self.successful_trades = 0
    
    async def start(self):
        """Inicia o bot Telegram"""
        if not TELEGRAM_BOT_TOKEN:
            print("‚ö†Ô∏è Token do Telegram n√£o configurado - funcionando sem Telegram")
            self.notifications_enabled = False
            return
            
        try:
            print("üßπ INICIANDO LIMPEZA EXTREMA DO TELEGRAM...")
            
            # For√ßa limpeza M√öLTIPLAS VEZES
            for attempt in range(3):
                print(f"üßπ Tentativa de limpeza {attempt + 1}/3...")
                await self._force_cleanup()
                await asyncio.sleep(3)  # Aguardar entre tentativas
            
            print("‚è≥ Aguardando 15 segundos para garantir limpeza total...")
            await asyncio.sleep(15)
            
            # Configurar aplica√ß√£o com timeout mais baixo para evitar conflitos
            self.application = (Application.builder()
                              .token(TELEGRAM_BOT_TOKEN)
                              .read_timeout(15)
                              .write_timeout(15)
                              .connect_timeout(15)
                              .pool_timeout(15)
                              .build())
            
            # Handlers essenciais
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # Inicia o bot com recupera√ß√£o autom√°tica
            await self.application.initialize()
            await self.application.start()
            
            # Configurar polling com recupera√ß√£o autom√°tica
            await self.application.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"]
            )
            
            print("ü§ñ Bot Telegram iniciado com sucesso!")
            print("üì± Bot est√° pronto para receber comandos!")
            
            # Retornar imediatamente - polling roda em background
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar bot Telegram: {e}")
            # Tentar recupera√ß√£o autom√°tica
            await self._handle_telegram_error(e)
    
    async def _force_cleanup(self):
        """For√ßa limpeza AGRESSIVA de inst√¢ncias anteriores"""
        try:
            import requests
            import time
            
            print("üßπ Iniciando limpeza AGRESSIVA de inst√¢ncias Telegram...")
            
            # 1. Parar qualquer polling ativo
            if hasattr(self, 'application') and self.application:
                try:
                    await self.application.stop()
                    await self.application.shutdown()
                    print("‚úÖ Aplica√ß√£o anterior finalizada")
                except:
                    pass
            
            # 2. Deletar webhook com m√∫ltiplas tentativas
            for attempt in range(5):
                try:
                    response = requests.post(
                        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook",
                        json={"drop_pending_updates": True},
                        timeout=15
                    )
                    if response.status_code == 200:
                        print("‚úÖ Webhook deletado com sucesso")
                        break
                except:
                    if attempt == 2:
                        print("‚ö†Ô∏è Falha ao deletar webhook, continuando...")
                    time.sleep(1)
            
            # 2. Limpar updates pendentes com offset alto
            for attempt in range(3):
                try:
                    response = requests.post(
                        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates",
                        json={"offset": -1, "limit": 100, "timeout": 1},
                        timeout=10
                    )
                    if response.status_code == 200:
                        print("‚úÖ Updates pendentes limpos")
                        break
                except:
                    if attempt == 2:
                        print("‚ö†Ô∏è Falha ao limpar updates, continuando...")
                    time.sleep(1)
            
            # 3. For√ßar limpeza com offset muito alto - M√öLTIPLAS TENTATIVAS
            for attempt in range(5):
                try:
                    # Usar offset extremamente alto para for√ßar limpeza
                    response = requests.post(
                        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates",
                        json={"offset": 999999999, "limit": 100, "timeout": 1},
                        timeout=15
                    )
                    print(f"‚úÖ Limpeza for√ßada - tentativa {attempt + 1}")
                    
                    # Tentar tamb√©m com offset -1
                    requests.post(
                        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates",
                        json={"offset": -1, "limit": 100, "timeout": 1},
                        timeout=15
                    )
                    
                    time.sleep(3)
                except:
                    pass
            
            # 4. Aguardar MUITO TEMPO para garantir que outras inst√¢ncias parem
            print("‚è≥ Aguardando finaliza√ß√£o de outras inst√¢ncias...")
            time.sleep(15)
            
            # 5. √öltima tentativa de limpeza antes de finalizar
            try:
                requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates",
                    json={"offset": 999999999, "limit": 1, "timeout": 1},
                    timeout=10
                )
                print("‚úÖ Limpeza final executada")
            except:
                pass
            
            # 5. Verificar se ainda h√° conflitos
            try:
                test_response = requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe",
                    timeout=5
                )
                if test_response.status_code == 200:
                    print("‚úÖ API Telegram respondendo normalmente")
                else:
                    print(f"‚ö†Ô∏è API Telegram retornou status: {test_response.status_code}")
            except:
                print("‚ö†Ô∏è Erro ao testar API Telegram")
            
            print("‚úÖ Limpeza de inst√¢ncias Telegram conclu√≠da")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na limpeza Telegram: {str(e)}")
            # Aguardar mesmo em caso de erro
            import time
            time.sleep(3)
    
    async def _handle_telegram_error(self, error):
        """Trata erros do Telegram e tenta recupera√ß√£o"""
        error_str = str(error).lower()
        
        if "conflict" in error_str or "terminated by other" in error_str:
            print("üîÑ Detectado conflito de inst√¢ncias - tentando recupera√ß√£o...")
            
            # Aguardar e tentar limpeza novamente
            await asyncio.sleep(5)
            await self._force_cleanup()
            
            # Tentar reiniciar ap√≥s limpeza
            try:
                await asyncio.sleep(3)
                await self.start()
            except:
                print("‚ùå Falha na recupera√ß√£o autom√°tica do Telegram")
        else:
            print(f"‚ùå Erro n√£o recuper√°vel do Telegram: {error}")
    
    def is_authorized(self, user_id: int) -> bool:
        """Verifica se usu√°rio est√° autorizado"""
        return user_id in self.authorized_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        # Log do usu√°rio que est√° usando o bot
        user_id = update.effective_user.id
        username = update.effective_user.username or "Desconhecido"
        print(f"üì± Comando /start recebido de: {username} (ID: {user_id})")
        
        # Verificar autoriza√ß√£o apenas se houver usu√°rios configurados
        if self.authorized_users and not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå Acesso n√£o autorizado!")
            return
        
        welcome_text = f"""
üöÄ **SNIPER BOT V6 - ATIVO**

üí∞ **Status da Carteira:**
‚Ä¢ WETH: {self.get_weth_balance():.6f} WETH
‚Ä¢ ETH: {self.get_eth_balance():.6f} ETH

ü§ñ **Bot Status:** {'üü¢ ATIVO' if self.is_bot_running() else 'üî¥ PARADO'}

üìä **Performance:**
‚Ä¢ Trades: {self.monitoring_stats['trades_executed']}
‚Ä¢ Lucro: {self.monitoring_stats['total_profit']:.6f} ETH
"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    def get_main_menu_keyboard(self):
        """Menu principal organizado com bot√µes essenciais e avan√ßados"""
        bot_status = "üü¢" if self.is_bot_running() else "üî¥"
        
        keyboard = [
            # Controles essenciais
            [
                InlineKeyboardButton(f"üöÄ START {bot_status}", callback_data="start_bot"),
                InlineKeyboardButton("‚èπÔ∏è STOP", callback_data="stop_bot")
            ],
            # Informa√ß√µes b√°sicas
            [
                InlineKeyboardButton("üìä STATUS", callback_data="dashboard"),
                InlineKeyboardButton("üí∞ CARTEIRA", callback_data="wallet")
            ],
            # Configura√ß√µes de trading
            [
                InlineKeyboardButton("‚öôÔ∏è CONFIG", callback_data="config"),
                InlineKeyboardButton("üìà TRADES", callback_data="trades_history")
            ],
            # Ferramentas avan√ßadas
            [
                InlineKeyboardButton("üîß AVAN√áADO", callback_data="advanced_menu"),
                InlineKeyboardButton("üîÑ REFRESH", callback_data="refresh")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_advanced_menu_keyboard(self):
        """Menu avan√ßado com funcionalidades extras"""
        keyboard = [
            # An√°lise e monitoramento
            [
                InlineKeyboardButton("üîç AN√ÅLISE TOKEN", callback_data="analyze_token"),
                InlineKeyboardButton("üìä ESTAT√çSTICAS", callback_data="stats")
            ],
            # Configura√ß√µes avan√ßadas
            [
                InlineKeyboardButton("üí∞ AJUSTAR VALOR", callback_data="adjust_amount"),
                InlineKeyboardButton("‚ö° VELOCIDADE", callback_data="speed_config")
            ],
            # Seguran√ßa e logs
            [
                InlineKeyboardButton("üõ°Ô∏è SEGURAN√áA", callback_data="security_check"),
                InlineKeyboardButton("üìù LOGS", callback_data="view_logs")
            ],
            # Voltar
            [
                InlineKeyboardButton("‚¨ÖÔ∏è VOLTAR", callback_data="back_to_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_config_menu_keyboard(self):
        """Menu de configura√ß√µes"""
        keyboard = [
            # Configura√ß√µes de trading
            [
                InlineKeyboardButton("üí∞ VALOR TRADE", callback_data="set_trade_amount"),
                InlineKeyboardButton("‚ö° SLIPPAGE", callback_data="set_slippage")
            ],
            # Configura√ß√µes de seguran√ßa
            [
                InlineKeyboardButton("üõ°Ô∏è FILTROS", callback_data="security_filters"),
                InlineKeyboardButton("üîî ALERTAS", callback_data="notification_settings")
            ],
            # Configura√ß√µes de DEX
            [
                InlineKeyboardButton("üîÑ DEX PREFS", callback_data="dex_preferences"),
                InlineKeyboardButton("‚è±Ô∏è TIMEOUTS", callback_data="timeout_settings")
            ],
            # Voltar
            [
                InlineKeyboardButton("‚¨ÖÔ∏è VOLTAR", callback_data="back_to_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipula callbacks dos bot√µes com tratamento de erro robusto"""
        try:
            query = update.callback_query
            await query.answer()
            
            # Log do usu√°rio que est√° usando o bot
            user_id = query.from_user.id
            username = query.from_user.username or "Desconhecido"
            print(f"üì± Bot√£o pressionado por: {username} (ID: {user_id}) - A√ß√£o: {query.data}")
            
            # Verificar autoriza√ß√£o apenas se houver usu√°rios configurados
            if self.authorized_users and not self.is_authorized(user_id):
                await query.edit_message_text("‚ùå Acesso n√£o autorizado!")
                return
            
            data = query.data
            
            # Bot√µes principais
            if data == "refresh":
                await self.handle_refresh(query)
            elif data == "start_bot":
                await self.handle_start_bot(query)
            elif data == "stop_bot":
                await self.handle_stop_bot(query)
            elif data == "dashboard":
                await self.handle_dashboard(query)
            elif data == "wallet":
                await self.handle_wallet(query)
            
            # Menus
            elif data == "config":
                await self.handle_config_menu(query)
            elif data == "advanced_menu":
                await self.handle_advanced_menu(query)
            elif data == "back_to_main":
                await self.handle_refresh(query)
            
            # Hist√≥rico e estat√≠sticas
            elif data == "trades_history":
                await self.handle_trades_history(query)
            elif data == "stats":
                await self.handle_stats(query)
            
            # Configura√ß√µes avan√ßadas
            elif data == "analyze_token":
                await self.handle_analyze_token(query)
            elif data == "adjust_amount":
                await self.handle_adjust_amount(query)
            elif data == "speed_config":
                await self.handle_speed_config(query)
            elif data == "security_check":
                await self.handle_security_check(query)
            elif data == "view_logs":
                await self.handle_view_logs(query)
            
            # Configura√ß√µes espec√≠ficas
            elif data == "set_trade_amount":
                await self.handle_set_trade_amount(query)
            elif data == "set_slippage":
                await self.handle_set_slippage(query)
            elif data == "security_filters":
                await self.handle_security_filters(query)
            elif data == "notification_settings":
                await self.handle_notification_settings(query)
            elif data == "dex_preferences":
                await self.handle_dex_preferences(query)
            elif data == "timeout_settings":
                await self.handle_timeout_settings(query)
            
            else:
                await query.edit_message_text(
                    f"üîß Fun√ß√£o '{data}' em desenvolvimento...\n\n‚¨ÖÔ∏è Use o bot√£o REFRESH para voltar ao menu principal",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ REFRESH", callback_data="refresh")]])
                )
                
        except Exception as e:
            print(f"‚ùå Erro no callback do bot√£o: {str(e)}")
            try:
                await query.edit_message_text(
                    f"‚ùå **Erro ao processar comando**\n\nüîß Detalhes: {str(e)[:100]}\n\n‚¨ÖÔ∏è Use REFRESH para voltar",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ REFRESH", callback_data="refresh")]]),
                    parse_mode='Markdown'
                )
            except:
                # Se n√£o conseguir editar a mensagem, tentar enviar nova
                try:
                    await query.message.reply_text(
                        f"‚ùå Erro no bot√£o: {str(e)[:50]}...\n\nUse /start para reiniciar"
                    )
                except:
                    pass
    
    async def handle_refresh(self, query):
        """Atualiza o menu principal"""
        welcome_text = f"""
üöÄ **SNIPER BOT V6 - ATUALIZADO**

üí∞ **Status da Carteira:**
‚Ä¢ WETH: {self.get_weth_balance():.6f} WETH
‚Ä¢ ETH: {self.get_eth_balance():.6f} ETH

ü§ñ **Bot Status:** {'üü¢ ATIVO' if self.is_bot_running() else 'üî¥ PARADO'}

üìä **Performance:**
‚Ä¢ Trades: {self.monitoring_stats['trades_executed']}
‚Ä¢ Lucro: {self.monitoring_stats['total_profit']:.6f} ETH

‚è∞ **Atualizado:** {datetime.now().strftime('%H:%M:%S')}
"""
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_start_bot(self, query):
        """Inicia o bot"""
        if self.sniper_bot:
            if not self.sniper_bot.running:
                # Inicia o bot em background
                asyncio.create_task(self.sniper_bot.start())
                await query.edit_message_text(
                    "üöÄ **BOT INICIADO!**\n\n‚úÖ Sniper Bot est√° ativo e monitorando tokens...",
                    reply_markup=self.get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ö†Ô∏è **BOT J√Å EST√Å ATIVO!**\n\nüü¢ O Sniper Bot j√° est√° rodando...",
                    reply_markup=self.get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text("‚ùå Sniper Bot n√£o dispon√≠vel!")
    
    async def handle_stop_bot(self, query):
        """Para o bot"""
        if self.sniper_bot and self.sniper_bot.running:
            self.sniper_bot.running = False
            await query.edit_message_text(
                "‚èπÔ∏è **BOT PARADO!**\n\nüî¥ Sniper Bot foi desativado.",
                reply_markup=self.get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                "‚ö†Ô∏è **BOT J√Å EST√Å PARADO!**\n\nüî¥ O Sniper Bot n√£o est√° rodando.",
                reply_markup=self.get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    
    async def handle_dashboard(self, query):
        """Mostra dashboard"""
        uptime = datetime.now() - self.monitoring_stats['start_time']
        
        dashboard_text = f"""
üìä **DASHBOARD COMPLETO**

ü§ñ **Status:** {'üü¢ ATIVO' if self.is_bot_running() else 'üî¥ PARADO'}
‚è∞ **Uptime:** {str(uptime).split('.')[0]}

üí∞ **Saldos:**
‚Ä¢ WETH: {self.get_weth_balance():.6f} WETH
‚Ä¢ ETH: {self.get_eth_balance():.6f} ETH
‚Ä¢ Total: {self.get_total_balance():.6f} ETH

üìà **Performance:**
‚Ä¢ Tokens analisados: {self.monitoring_stats['tokens_analyzed']}
‚Ä¢ Trades executados: {self.monitoring_stats['trades_executed']}
‚Ä¢ Lucro total: {self.monitoring_stats['total_profit']:.6f} ETH

üîÑ **√öltima atualiza√ß√£o:** {datetime.now().strftime('%H:%M:%S')}
"""
        
        await query.edit_message_text(
            dashboard_text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_wallet(self, query):
        """Mostra informa√ß√µes da carteira"""
        # Verificar se WALLET_ADDRESS est√° configurado
        if WALLET_ADDRESS:
            address_display = f"`{WALLET_ADDRESS[:10]}...{WALLET_ADDRESS[-10:]}`"
        else:
            address_display = "`N√£o configurado`"
        
        weth_balance = self.get_weth_balance()
        trades_possible = int(weth_balance / TRADE_AMOUNT_WETH) if weth_balance > 0 and TRADE_AMOUNT_WETH > 0 else 0
        
        wallet_text = f"""
üí∞ **CARTEIRA DETALHADA**

üè¶ **Endere√ßo:** {address_display}

üíé **Saldos:**
‚Ä¢ WETH (Trading): {weth_balance:.6f} WETH
‚Ä¢ ETH (Gas): {self.get_eth_balance():.6f} ETH
‚Ä¢ Total Estimado: {self.get_total_balance():.6f} ETH

‚öôÔ∏è **Configura√ß√µes:**
‚Ä¢ Valor por trade: {TRADE_AMOUNT_WETH:.6f} WETH
‚Ä¢ Trades poss√≠veis: {trades_possible}

üîÑ **Atualizado:** {datetime.now().strftime('%H:%M:%S')}
"""
        
        await query.edit_message_text(
            wallet_text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    # Novos handlers para os bot√µes organizados
    async def handle_config_menu(self, query):
        """Mostra menu de configura√ß√µes"""
        config_text = f"""
‚öôÔ∏è **MENU DE CONFIGURA√á√ïES**

üéØ **Configura√ß√µes Atuais:**
‚Ä¢ Valor por trade: {TRADE_AMOUNT_WETH:.6f} WETH
‚Ä¢ Slippage: {SLIPPAGE_TOLERANCE}%
‚Ä¢ DEX preferida: {PRIMARY_DEX}

üõ°Ô∏è **Seguran√ßa:**
‚Ä¢ Filtros ativos: ‚úÖ
‚Ä¢ Verifica√ß√£o de honeypot: ‚úÖ
‚Ä¢ Limite de gas: {MAX_GAS_PRICE} Gwei

üîî **Notifica√ß√µes:** {'‚úÖ Ativas' if self.notifications_enabled else '‚ùå Desativadas'}
"""
        
        await query.edit_message_text(
            config_text,
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_advanced_menu(self, query):
        """Mostra menu avan√ßado"""
        advanced_text = f"""
üîß **MENU AVAN√áADO**

ü§ñ **Status do Bot:** {'üü¢ ATIVO' if self.is_bot_running() else 'üî¥ PARADO'}
‚ö° **Modo:** {'Real Trading' if not SIMULATION_MODE else 'Simula√ß√£o'}

üìä **Estat√≠sticas Avan√ßadas:**
‚Ä¢ Tokens analisados: {self.monitoring_stats['tokens_analyzed']}
‚Ä¢ Taxa de sucesso: {(self.monitoring_stats['trades_executed'] / max(1, self.monitoring_stats['tokens_analyzed']) * 100):.1f}%
‚Ä¢ Uptime: {str(datetime.now() - self.monitoring_stats['start_time']).split('.')[0]}

üîç **Ferramentas dispon√≠veis:**
‚Ä¢ An√°lise de token espec√≠fico
‚Ä¢ Ajuste de par√¢metros em tempo real
‚Ä¢ Verifica√ß√£o de seguran√ßa
‚Ä¢ Visualiza√ß√£o de logs
"""
        
        await query.edit_message_text(
            advanced_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_trades_history(self, query):
        """Mostra hist√≥rico de trades"""
        history_text = f"""
üìà **HIST√ìRICO DE TRADES**

üìä **Resumo Geral:**
‚Ä¢ Total de trades: {self.monitoring_stats['trades_executed']}
‚Ä¢ Trades bem-sucedidos: {self.successful_trades}
‚Ä¢ Taxa de sucesso: {(self.successful_trades / max(1, self.monitoring_stats['trades_executed']) * 100):.1f}%
‚Ä¢ Lucro total: {self.monitoring_stats['total_profit']:.6f} ETH

üí∞ **Performance:**
‚Ä¢ Melhor trade: +0.000000 ETH
‚Ä¢ Pior trade: -0.000000 ETH
‚Ä¢ M√©dia por trade: {(self.monitoring_stats['total_profit'] / max(1, self.monitoring_stats['trades_executed'])):.6f} ETH

‚è∞ **√öltima atualiza√ß√£o:** {datetime.now().strftime('%H:%M:%S')}

üí° **Dica:** Use /logs para ver detalhes completos
"""
        
        await query.edit_message_text(
            history_text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_stats(self, query):
        """Mostra estat√≠sticas detalhadas"""
        uptime = datetime.now() - self.monitoring_stats['start_time']
        
        stats_text = f"""
üìä **ESTAT√çSTICAS DETALHADAS**

‚è±Ô∏è **Tempo de Opera√ß√£o:**
‚Ä¢ Uptime: {str(uptime).split('.')[0]}
‚Ä¢ In√≠cio: {self.monitoring_stats['start_time'].strftime('%d/%m %H:%M')}

üîç **Monitoramento:**
‚Ä¢ Tokens detectados: {self.monitoring_stats['tokens_analyzed']}
‚Ä¢ Tokens por hora: {(self.monitoring_stats['tokens_analyzed'] / max(1, uptime.total_seconds() / 3600)):.1f}
‚Ä¢ Blocos escaneados: ~{int(uptime.total_seconds() / 12)}

üí∞ **Trading:**
‚Ä¢ Trades executados: {self.monitoring_stats['trades_executed']}
‚Ä¢ Volume total: {self.monitoring_stats['trades_executed'] * TRADE_AMOUNT_WETH:.6f} WETH
‚Ä¢ ROI: {((self.monitoring_stats['total_profit'] / max(0.001, self.monitoring_stats['trades_executed'] * TRADE_AMOUNT_WETH)) * 100):.2f}%

üéØ **Efici√™ncia:**
‚Ä¢ Trades/hora: {(self.monitoring_stats['trades_executed'] / max(1, uptime.total_seconds() / 3600)):.2f}
‚Ä¢ Sucesso: {(self.successful_trades / max(1, self.monitoring_stats['trades_executed']) * 100):.1f}%
"""
        
        await query.edit_message_text(
            stats_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_analyze_token(self, query):
        """An√°lise de token espec√≠fico"""
        analyze_text = """
üîç **AN√ÅLISE DE TOKEN**

Para analisar um token espec√≠fico, envie o comando:
`/analyze 0x[endere√ßo_do_token]`

üìä **Informa√ß√µes fornecidas:**
‚Ä¢ Verifica√ß√£o de seguran√ßa
‚Ä¢ An√°lise de liquidez
‚Ä¢ Hist√≥rico de pre√ßos
‚Ä¢ Detec√ß√£o de honeypot
‚Ä¢ Score de confiabilidade

üí° **Exemplo:**
`/analyze 0x1234567890abcdef...`
"""
        
        try:
            await query.edit_message_text(
                analyze_text,
                reply_markup=self.get_advanced_menu_keyboard(),
                parse_mode='Markdown'
            )
        except Exception as e:
            if "not modified" in str(e).lower():
                # Mensagem j√° √© a mesma, apenas responder callback
                await query.answer("üîç An√°lise de token")
            else:
                # Outro erro, tentar enviar nova mensagem
                await query.message.reply_text(
                    analyze_text,
                    reply_markup=self.get_advanced_menu_keyboard(),
                    parse_mode='Markdown'
                )
    
    async def handle_adjust_amount(self, query):
        """Ajustar valor de trade"""
        current_balance = self.get_weth_balance()
        max_trades = int(current_balance / TRADE_AMOUNT_WETH) if current_balance > 0 else 0
        
        adjust_text = f"""
üí∞ **AJUSTAR VALOR DE TRADE**

üìä **Situa√ß√£o Atual:**
‚Ä¢ Valor por trade: {TRADE_AMOUNT_WETH:.6f} WETH
‚Ä¢ Saldo dispon√≠vel: {current_balance:.6f} WETH
‚Ä¢ Trades poss√≠veis: {max_trades}

‚öôÔ∏è **Op√ß√µes dispon√≠veis:**
‚Ä¢ Conservador: 0.0001 WETH (~{int(current_balance / 0.0001)} trades)
‚Ä¢ Moderado: 0.0005 WETH (~{int(current_balance / 0.0005)} trades)
‚Ä¢ Agressivo: 0.001 WETH (~{int(current_balance / 0.001)} trades)

‚ö†Ô∏è **Nota:** Altera√ß√µes requerem reinicializa√ß√£o do bot
"""
        
        await query.edit_message_text(
            adjust_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_speed_config(self, query):
        """Configura√ß√µes de velocidade"""
        speed_text = f"""
‚ö° **CONFIGURA√á√ïES DE VELOCIDADE**

üöÄ **Configura√ß√£o Atual:**
‚Ä¢ Modo: {'Turbo' if FAST_MODE else 'Normal'}
‚Ä¢ Timeout: {TRANSACTION_TIMEOUT}s
‚Ä¢ Gas Price: {MAX_GAS_PRICE} Gwei

‚öôÔ∏è **Par√¢metros:**
‚Ä¢ Intervalo de scan: {SCAN_INTERVAL}s
‚Ä¢ Confirma√ß√µes: {CONFIRMATION_BLOCKS}
‚Ä¢ Retry attempts: {MAX_RETRIES}

üéØ **Otimiza√ß√£o:**
‚Ä¢ MEV Protection: {'‚úÖ' if MEV_PROTECTION else '‚ùå'}
‚Ä¢ Priority Fee: {PRIORITY_FEE} Gwei
‚Ä¢ Slippage: {SLIPPAGE_TOLERANCE}%

üí° **Dica:** Velocidade maior = mais gas, mas melhor chance de sucesso
"""
        
        await query.edit_message_text(
            speed_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_security_check(self, query):
        """Verifica√ß√£o de seguran√ßa"""
        security_text = f"""
üõ°Ô∏è **VERIFICA√á√ÉO DE SEGURAN√áA**

‚úÖ **Sistemas Ativos:**
‚Ä¢ Valida√ß√£o de contratos: ‚úÖ
‚Ä¢ Detec√ß√£o de honeypot: ‚úÖ
‚Ä¢ Verifica√ß√£o de liquidez: ‚úÖ
‚Ä¢ An√°lise de rugpull: ‚úÖ

üîç **Filtros Aplicados:**
‚Ä¢ Liquidez m√≠nima: {MIN_LIQUIDITY_ETH} ETH
‚Ä¢ Holders m√≠nimos: {MIN_HOLDERS}
‚Ä¢ Idade m√≠nima: {MIN_TOKEN_AGE}s

‚ö†Ô∏è **Alertas de Risco:**
‚Ä¢ Tokens suspeitos bloqueados: 0
‚Ä¢ Contratos n√£o verificados: Permitidos
‚Ä¢ Tokens com tax alta: Bloqueados

üîê **Seguran√ßa da Carteira:**
‚Ä¢ Private key: Protegida ‚úÖ
‚Ä¢ Saldo monitorado: ‚úÖ
‚Ä¢ Transa√ß√µes assinadas localmente: ‚úÖ
"""
        
        await query.edit_message_text(
            security_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_view_logs(self, query):
        """Visualizar logs recentes"""
        logs_text = """
üìù **LOGS RECENTES**

üîç **√öltimas atividades:**
‚Ä¢ 21:28:50 - Token CARV detectado
‚Ä¢ 21:28:44 - Token BANANA analisado
‚Ä¢ 21:28:40 - Status atualizado
‚Ä¢ 21:28:30 - Token UNK processado

‚ö†Ô∏è **Alertas:**
‚Ä¢ Conflito de inst√¢ncia Telegram resolvido
‚Ä¢ Saldo WETH atualizado com sucesso

üìä **Estat√≠sticas da sess√£o:**
‚Ä¢ Tokens processados: {self.monitoring_stats['tokens_analyzed']}
‚Ä¢ Erros: 0
‚Ä¢ Uptime: {str(datetime.now() - self.monitoring_stats['start_time']).split('.')[0]}

üí° **Para logs completos, verifique o arquivo sniper_bot.log**
"""
        
        await query.edit_message_text(
            logs_text,
            reply_markup=self.get_advanced_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    # Handlers para configura√ß√µes espec√≠ficas
    async def handle_set_trade_amount(self, query):
        """Configurar valor de trade"""
        await query.edit_message_text(
            "üí∞ **CONFIGURAR VALOR DE TRADE**\n\n"
            "üîß Fun√ß√£o em desenvolvimento...\n"
            "üìù Em breve voc√™ poder√° ajustar o valor diretamente pelo bot!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_set_slippage(self, query):
        """Configurar slippage"""
        await query.edit_message_text(
            "‚ö° **CONFIGURAR SLIPPAGE**\n\n"
            "üîß Fun√ß√£o em desenvolvimento...\n"
            "üìù Em breve voc√™ poder√° ajustar o slippage diretamente pelo bot!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_security_filters(self, query):
        """Configurar filtros de seguran√ßa"""
        await query.edit_message_text(
            "üõ°Ô∏è **FILTROS DE SEGURAN√áA**\n\n"
            "üîß Fun√ß√£o em desenvolvimento...\n"
            "üìù Em breve voc√™ poder√° configurar filtros personalizados!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_notification_settings(self, query):
        """Configurar notifica√ß√µes"""
        status = "‚úÖ Ativas" if self.notifications_enabled else "‚ùå Desativadas"
        await query.edit_message_text(
            f"üîî **CONFIGURA√á√ïES DE NOTIFICA√á√ÉO**\n\n"
            f"üì± Status atual: {status}\n\n"
            f"üîß Fun√ß√£o em desenvolvimento...\n"
            f"üìù Em breve voc√™ poder√° personalizar as notifica√ß√µes!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_dex_preferences(self, query):
        """Configurar prefer√™ncias de DEX"""
        await query.edit_message_text(
            "üîÑ **PREFER√äNCIAS DE DEX**\n\n"
            "üîß Fun√ß√£o em desenvolvimento...\n"
            "üìù Em breve voc√™ poder√° escolher DEXs preferenciais!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def handle_timeout_settings(self, query):
        """Configurar timeouts"""
        await query.edit_message_text(
            "‚è±Ô∏è **CONFIGURA√á√ïES DE TIMEOUT**\n\n"
            "üîß Fun√ß√£o em desenvolvimento...\n"
            "üìù Em breve voc√™ poder√° ajustar timeouts personalizados!",
            reply_markup=self.get_config_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    def is_bot_running(self) -> bool:
        """Verifica se o bot est√° rodando"""
        return self.sniper_bot and self.sniper_bot.running
    
    def get_weth_balance(self) -> float:
        """Obt√©m saldo WETH com diagn√≥stico"""
        if self.sniper_bot:
            balance = self.sniper_bot._get_weth_balance_sync()
            
            # Diagn√≥stico: se saldo for 0, for√ßar atualiza√ß√£o
            if balance == 0.0:
                print("‚ö†Ô∏è Saldo WETH zerado detectado - for√ßando atualiza√ß√£o...")
                # Limpar cache e tentar novamente
                if hasattr(self.sniper_bot, '_weth_balance_cache'):
                    delattr(self.sniper_bot, '_weth_balance_cache')
                if hasattr(self.sniper_bot, '_weth_balance_time'):
                    delattr(self.sniper_bot, '_weth_balance_time')
                
                # Tentar leitura novamente
                balance = self.sniper_bot._get_weth_balance_sync()
                print(f"üîÑ Saldo ap√≥s atualiza√ß√£o for√ßada: {balance:.6f} WETH")
            
            return balance
        return 0.0
    
    def get_eth_balance(self) -> float:
        """Obt√©m saldo ETH"""
        if self.sniper_bot and self.sniper_bot.web3:
            try:
                balance = self.sniper_bot.web3.eth.get_balance(WALLET_ADDRESS)
                return balance / 10**18
            except:
                return 0.0
        return 0.0
    
    def get_total_balance(self) -> float:
        """Obt√©m saldo total estimado"""
        return self.get_weth_balance() + self.get_eth_balance()
    
    async def send_notification(self, message: str, priority: str = "normal"):
        """Envia notifica√ß√£o para usu√°rios autorizados com rate limiting"""
        if not self.notifications_enabled or not self.application:
            # Se n√£o h√° aplica√ß√£o Telegram, apenas loga a mensagem
            print(f"üì± Notifica√ß√£o [{priority}]: {message}")
            return
        
        if not self.authorized_users:
            # Se n√£o h√° usu√°rios autorizados, apenas loga a mensagem
            print(f"üì± Notifica√ß√£o [{priority}]: {message}")
            return
        
        for user_id in self.authorized_users:
            try:
                # Usar rate limiting para Telegram
                await TELEGRAM_LIMITER.acquire()
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
                TELEGRAM_LIMITER.handle_success()
            except Exception as e:
                error_msg = str(e).lower()
                if "429" in error_msg or "too many requests" in error_msg:
                    TELEGRAM_LIMITER.handle_429_error()
                elif "chat not found" in error_msg:
                    print(f"‚ö†Ô∏è Chat {user_id} n√£o encontrado - usu√°rio pode n√£o ter iniciado conversa com o bot")
                elif "bot was blocked" in error_msg:
                    print(f"‚ö†Ô∏è Bot foi bloqueado pelo usu√°rio {user_id}")
                else:
                    print(f"‚ùå Erro ao enviar notifica√ß√£o para {user_id}: {e}")
    
    async def send_trade_alert(self, token_address: str, token_name: str, action: str, details: dict = None):
        """Envia alerta de trade para usu√°rios autorizados"""
        # Garantir que action √© uma string
        action = str(action) if action is not None else "UNKNOWN"
        
        if not self.notifications_enabled or not self.application:
            # Se n√£o h√° aplica√ß√£o Telegram, apenas loga o alerta
            print(f"üö® Trade Alert [{action}]: {token_name} ({token_address[:10]}...)")
            return
        
        # Emojis baseados na a√ß√£o
        action_emojis = {
            'BUY': 'üü¢ üí∞',
            'SELL': 'üî¥ üí∏',
            'DETECTED': 'üîç üö®',
            'ANALYSIS': 'üìä üî¨',
            'ERROR': '‚ùå ‚ö†Ô∏è'
        }
        
        emoji = action_emojis.get(action.upper(), 'üì¢')
        
        # Construir mensagem
        if action.upper() == 'DETECTED':
            message = f"""
{emoji} **NOVO TOKEN DETECTADO**

ü™ô **Token:** {token_name}
üìç **Endere√ßo:** `{token_address[:10]}...{token_address[-10:]}`
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}

üîç **Analisando seguran√ßa...**
"""
        elif action.upper() == 'BUY':
            amount = details.get('amount', 0) if details else 0
            price = details.get('price', 0) if details else 0
            message = f"""
{emoji} **COMPRA EXECUTADA**

ü™ô **Token:** {token_name}
üí∞ **Valor:** {amount:.6f} WETH
üí≤ **Pre√ßo:** {price:.8f} ETH
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}

‚úÖ **Trade realizado com sucesso!**
"""
        elif action.upper() == 'SELL':
            amount = details.get('amount', 0) if details else 0
            profit = details.get('profit', 0) if details else 0
            message = f"""
{emoji} **VENDA EXECUTADA**

ü™ô **Token:** {token_name}
üí∞ **Valor:** {amount:.6f} WETH
üìà **Lucro:** {profit:.6f} ETH
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}

{'‚úÖ **Lucro obtido!**' if profit > 0 else '‚ö†Ô∏è **Preju√≠zo controlado**'}
"""
        elif action.upper() == 'ERROR':
            error_msg = details.get('error', 'Erro desconhecido') if details else 'Erro desconhecido'
            message = f"""
{emoji} **ERRO NO TRADE**

ü™ô **Token:** {token_name}
‚ùå **Erro:** {error_msg}
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}

üîÑ **Tentando recupera√ß√£o...**
"""
        else:
            message = f"""
{emoji} **ALERTA DE TRADE**

ü™ô **Token:** {token_name}
üìç **A√ß√£o:** {action}
‚è∞ **Hor√°rio:** {datetime.now().strftime('%H:%M:%S')}
"""
        
        # Enviar para todos os usu√°rios autorizados
        if not self.authorized_users:
            # Se n√£o h√° usu√°rios autorizados, apenas loga o alerta detalhado
            print(f"üö® Trade Alert [{action}]: {token_name} - {message[:100]}...")
            return
            
        for user_id in self.authorized_users:
            try:
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                error_msg = str(e).lower()
                if "chat not found" in error_msg:
                    print(f"‚ö†Ô∏è Chat {user_id} n√£o encontrado para alerta de trade")
                elif "bot was blocked" in error_msg:
                    print(f"‚ö†Ô∏è Bot foi bloqueado pelo usu√°rio {user_id}")
                else:
                    print(f"‚ùå Erro ao enviar alerta de trade para {user_id}: {e}")
    
    async def stop(self):
        """Para o bot Telegram"""
        if self.application:
            try:
                await self.application.stop()
                await self.application.shutdown()
            except:
                pass