#!/usr/bin/env python3
"""
Teste das melhorias implementadas no Sniper Bot V2.0
Foca em testar as corre√ß√µes de rate limiting e saldos baixos
"""

import asyncio
import time
from unittest.mock import Mock, patch, AsyncMock
from web3 import Web3
from colorama import Fore, Style, init

# Inicializar colorama
init(autoreset=True)

# Mock das configura√ß√µes para teste
class MockConfig:
    BASE_RPC_URL = "https://mainnet.base.org"
    BASE_RPC_BACKUP = "https://base-mainnet.public.blastapi.io"
    WALLET_ADDRESS = "0x1234567890123456789012345678901234567890"
    PRIVATE_KEY = "0x" + "1" * 64
    WETH_ADDRESS = "0x4200000000000000000000000000000000000006"
    EMERGENCY_MODE_THRESHOLD = 0.0001
    EMERGENCY_TRADE_AMOUNT = 0.000050
    EMERGENCY_GAS_PRICE = 10

def test_rate_limiter():
    """Testa o rate limiter melhorado"""
    print(f"{Fore.CYAN}üß™ Testando Rate Limiter...{Style.RESET_ALL}")
    
    try:
        from rate_limiter import BASE_RPC_LIMITER
        
        # Verificar configura√ß√µes
        print(f"   Max requests: {BASE_RPC_LIMITER.config.max_requests}")
        print(f"   Window: {BASE_RPC_LIMITER.config.time_window}s")
        print(f"   Backoff multiplier: {BASE_RPC_LIMITER.config.backoff_multiplier}")
        
        # Simular rate limiting
        start_time = time.time()
        for i in range(3):
            BASE_RPC_LIMITER.handle_success()
            print(f"   Request {i+1}: OK")
        
        # Simular 429 error
        BASE_RPC_LIMITER.handle_429_error()
        print(f"   429 error handled - backoff: {BASE_RPC_LIMITER.current_backoff}s")
        
        print(f"{Fore.GREEN}‚úÖ Rate Limiter: OK{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Rate Limiter: {e}{Style.RESET_ALL}")
        return False

def test_dex_handler_improvements():
    """Testa as melhorias no DEX handler"""
    print(f"{Fore.CYAN}üß™ Testando DEX Handler melhorado...{Style.RESET_ALL}")
    
    try:
        # Mock Web3
        mock_web3 = Mock()
        mock_web3.is_connected.return_value = True
        mock_web3.from_wei.return_value = 0.001
        mock_web3.to_wei.return_value = 1000000000000000
        
        # Importar e testar DEX handler
        from dex_handler import DEXHandler
        
        # Patch das configura√ß√µes
        with patch('dex_handler.BASE_RPC_BACKUP', MockConfig.BASE_RPC_BACKUP):
            with patch('dex_handler.WALLET_ADDRESS', MockConfig.WALLET_ADDRESS):
                with patch('dex_handler.WETH_ADDRESS', MockConfig.WETH_ADDRESS):
                    dex_handler = DEXHandler(mock_web3)
                    
                    # Testar inicializa√ß√£o
                    print(f"   RPC backup inicializado: {'‚úÖ' if dex_handler.backup_web3 else '‚ùå'}")
                    print(f"   Cache de saldos: {'‚úÖ' if hasattr(dex_handler, 'balance_cache') else '‚ùå'}")
                    print(f"   Timeout do cache: {dex_handler.cache_timeout}s")
                    
                    # Testar cache
                    cache_key = "test_balance"
                    dex_handler._cache_balance(cache_key, 0.5)
                    cached_value = dex_handler._get_cached_balance(cache_key)
                    print(f"   Cache funcionando: {'‚úÖ' if cached_value == 0.5 else '‚ùå'}")
                    
                    # Testar Web3 instance
                    web3_instance = dex_handler._get_web3_instance()
                    print(f"   Web3 instance: {'‚úÖ' if web3_instance else '‚ùå'}")
        
        print(f"{Fore.GREEN}‚úÖ DEX Handler: OK{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå DEX Handler: {e}{Style.RESET_ALL}")
        return False

async def test_emergency_mode():
    """Testa o modo de emerg√™ncia"""
    print(f"{Fore.CYAN}üß™ Testando Modo de Emerg√™ncia...{Style.RESET_ALL}")
    
    try:
        # Simular saldo baixo
        low_eth_balance = 0.000005  # Menor que EMERGENCY_MODE_THRESHOLD
        
        emergency_mode = low_eth_balance < MockConfig.EMERGENCY_MODE_THRESHOLD
        print(f"   Saldo ETH: {low_eth_balance:.6f}")
        print(f"   Threshold: {MockConfig.EMERGENCY_MODE_THRESHOLD:.6f}")
        print(f"   Modo emerg√™ncia ativado: {'‚úÖ' if emergency_mode else '‚ùå'}")
        
        if emergency_mode:
            trade_amount = MockConfig.EMERGENCY_TRADE_AMOUNT
            print(f"   Trade amount reduzido: {trade_amount:.6f} WETH")
            print(f"   Gas price emerg√™ncia: {MockConfig.EMERGENCY_GAS_PRICE} gwei")
        
        print(f"{Fore.GREEN}‚úÖ Modo Emerg√™ncia: OK{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Modo Emerg√™ncia: {e}{Style.RESET_ALL}")
        return False

def test_config_improvements():
    """Testa as melhorias na configura√ß√£o"""
    print(f"{Fore.CYAN}üß™ Testando Configura√ß√µes melhoradas...{Style.RESET_ALL}")
    
    try:
        from config import (
            EMERGENCY_MODE_THRESHOLD,
            EMERGENCY_TRADE_AMOUNT, 
            EMERGENCY_GAS_PRICE,
            BASE_RPC_BACKUP
        )
        
        print(f"   Emergency threshold: {EMERGENCY_MODE_THRESHOLD}")
        print(f"   Emergency trade amount: {EMERGENCY_TRADE_AMOUNT}")
        print(f"   Emergency gas price: {EMERGENCY_GAS_PRICE}")
        print(f"   RPC backup configurado: {'‚úÖ' if BASE_RPC_BACKUP else '‚ùå'}")
        
        print(f"{Fore.GREEN}‚úÖ Configura√ß√µes: OK{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Configura√ß√µes: {e}{Style.RESET_ALL}")
        return False

async def test_weth_balance_cache():
    """Testa o cache de saldo WETH"""
    print(f"{Fore.CYAN}üß™ Testando Cache de Saldo WETH...{Style.RESET_ALL}")
    
    try:
        # Mock Web3 e contratos
        mock_web3 = Mock()
        mock_web3.is_connected.return_value = True
        mock_web3.from_wei.return_value = 0.001
        
        mock_contract = Mock()
        mock_contract.functions.balanceOf.return_value.call.return_value = 1000000000000000
        mock_web3.eth.contract.return_value = mock_contract
        
        from dex_handler import DEXHandler
        
        with patch('dex_handler.BASE_RPC_BACKUP', MockConfig.BASE_RPC_BACKUP):
            with patch('dex_handler.WALLET_ADDRESS', MockConfig.WALLET_ADDRESS):
                with patch('dex_handler.WETH_ADDRESS', MockConfig.WETH_ADDRESS):
                    with patch('dex_handler.BASE_RPC_LIMITER') as mock_limiter:
                        mock_limiter.acquire = AsyncMock()
                        mock_limiter.handle_success = Mock()
                        
                        dex_handler = DEXHandler(mock_web3)
                        
                        # Primeira chamada - deve fazer requisi√ß√£o
                        balance1 = await dex_handler.get_weth_balance()
                        print(f"   Primeira chamada: {balance1:.6f} WETH")
                        
                        # Segunda chamada - deve usar cache
                        balance2 = await dex_handler.get_weth_balance()
                        print(f"   Segunda chamada (cache): {balance2:.6f} WETH")
                        
                        # Verificar se usou cache
                        cache_used = balance1 == balance2
                        print(f"   Cache funcionando: {'‚úÖ' if cache_used else '‚ùå'}")
        
        print(f"{Fore.GREEN}‚úÖ Cache WETH: OK{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Cache WETH: {e}{Style.RESET_ALL}")
        return False

async def main():
    """Executa todos os testes"""
    print(f"{Fore.YELLOW}üöÄ TESTANDO MELHORIAS DO SNIPER BOT V2.0{Style.RESET_ALL}")
    print("=" * 60)
    
    tests = [
        ("Rate Limiter", test_rate_limiter()),
        ("DEX Handler", test_dex_handler_improvements()),
        ("Modo Emerg√™ncia", await test_emergency_mode()),
        ("Configura√ß√µes", test_config_improvements()),
        ("Cache WETH", await test_weth_balance_cache()),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, result in tests:
        if result:
            passed += 1
        print()
    
    print("=" * 60)
    print(f"{Fore.CYAN}üìä RESULTADO DOS TESTES:{Style.RESET_ALL}")
    print(f"   ‚úÖ Passou: {passed}/{total}")
    print(f"   ‚ùå Falhou: {total - passed}/{total}")
    
    if passed == total:
        print(f"{Fore.GREEN}üéâ TODOS OS TESTES PASSARAM!{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚úÖ Sistema pronto para produ√ß√£o{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}‚ö†Ô∏è Alguns testes falharam - revisar implementa√ß√£o{Style.RESET_ALL}")
    
    print("\n" + "=" * 60)
    print(f"{Fore.CYAN}üîß MELHORIAS IMPLEMENTADAS:{Style.RESET_ALL}")
    print("‚Ä¢ Rate limiting otimizado (15 req/min)")
    print("‚Ä¢ RPC backup para alta disponibilidade")
    print("‚Ä¢ Cache de saldos (30s)")
    print("‚Ä¢ Modo de emerg√™ncia para saldos baixos")
    print("‚Ä¢ Retry logic com backoff inteligente")
    print("‚Ä¢ Tratamento espec√≠fico para 429 errors")
    print("‚Ä¢ Convers√£o autom√°tica WETH->ETH")
    print("‚Ä¢ Logs detalhados para debugging")

if __name__ == "__main__":
    asyncio.run(main())